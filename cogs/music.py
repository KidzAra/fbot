import asyncio
import random
import disnake
from disnake.ext import commands
import yt_dlp
from collections import deque
from config import FFMPEG_OPTIONS, MUSIC_CONTROL_CHANNEL_ID

# YT-DLP configuration
YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'extractaudio': True,
    'audioformat': 'mp3',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
}

class Song:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥–∏"""
    def __init__(self, source, title, url, duration, requested_by):
        self.source = source
        self.title = title
        self.url = url
        self.duration = duration
        self.requested_by = requested_by

    @classmethod
    async def create(cls, search, requester, bot):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Song –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ URL"""
        loop = bot.loop or asyncio.get_event_loop()
        
        try:
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                try:
                    info = await loop.run_in_executor(None, lambda: ydl.extract_info(search, download=False))
                    
                    if info is None:
                        raise commands.CommandError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
                    
                    if 'entries' in info:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                        if len(info['entries']) == 0:
                            raise commands.CommandError("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                        info = info['entries'][0]
                    
                    title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
                    url = info.get('webpage_url', search)
                    source = info.get('url')
                    
                    if not source:
                        raise commands.CommandError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ.")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:—Å–µ–∫—É–Ω–¥–∞—Ö
                    duration_seconds = info.get('duration', 0)
                    minutes, seconds = divmod(duration_seconds, 60)
                    duration = f"{minutes}:{seconds:02d}"
                    
                    return cls(source, title, url, duration, requester)
                except yt_dlp.utils.DownloadError as e:
                    if "Private video" in str(e):
                        raise commands.CommandError("–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ, –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
                    elif "This video is not available" in str(e):
                        raise commands.CommandError("–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                    elif "Sign in" in str(e):
                        raise commands.CommandError("–≠—Ç–æ –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ YouTube.")
                    else:
                        raise commands.CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}")
        except Exception as e:
            if isinstance(e, commands.CommandError):
                raise e
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
            raise commands.CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {str(e)}")

class MusicPlayer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    def __init__(self, bot, guild):
        self.bot = bot
        self.guild = guild
        self.queue = deque()
        self.current = None
        self.voice_client = None
        self.loop = False  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        self.control_message = None

    def next(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if self.voice_client and self.voice_client.is_connected():
            if self.loop and self.current:
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                self.queue.appendleft(self.current)
            
            if self.queue:
                self.current = self.queue.popleft()
                audio = disnake.FFmpegPCMAudio(self.current.source, **FFMPEG_OPTIONS)
                self.voice_client.play(audio, after=lambda e: self.play_next(e))
                return True
            else:
                self.current = None
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–µ—Å–µ–Ω
                asyncio.run_coroutine_threadsafe(self.disconnect_after_timeout(300), self.bot.loop)
                return False

    def play_next(self, error=None):
        """–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞"""
        if error:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")
        
        if not self.next() and self.control_message:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            asyncio.run_coroutine_threadsafe(self.update_control_panel(), self.bot.loop)

    async def update_control_panel(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if not self.control_message:
            return
            
        try:
            embed = self.create_queue_embed()
            await self.control_message.edit(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def create_queue_embed(self):
        """–°–æ–∑–¥–∞–µ—Ç embed –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
        embed = disnake.Embed(title="üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä", color=disnake.Color.blurple())
        
        # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        if self.current:
            embed.add_field(
                name="üîä –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                value=f"[{self.current.title}]({self.current.url}) | `{self.current.duration}` | {self.current.requested_by.mention}",
                inline=False
            )
        else:
            embed.add_field(name="üîä –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", value="–ù–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è", inline=False)
        
        # –û—á–µ—Ä–µ–¥—å
        if self.queue:
            queue_text = "\n".join([
                f"`{i+1}.` [{song.title}]({song.url}) | `{song.duration}` | {song.requested_by.mention}"
                for i, song in enumerate(list(self.queue)[:5])
            ])
            
            if len(self.queue) > 5:
                queue_text += f"\n\n... –∏ –µ—â–µ {len(self.queue) - 5} —Ç—Ä–µ–∫–æ–≤"
                
            embed.add_field(name="üìã –û—á–µ—Ä–µ–¥—å", value=queue_text, inline=False)
        else:
            embed.add_field(name="üìã –û—á–µ—Ä–µ–¥—å", value="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", inline=False)
        
        # –°—Ç–∞—Ç—É—Å
        status = []
        if self.loop:
            status.append("üîÅ –ü–æ–≤—Ç–æ—Ä: –í–∫–ª—é—á–µ–Ω")
        else:
            status.append("üîÅ –ü–æ–≤—Ç–æ—Ä: –í—ã–∫–ª—é—á–µ–Ω")
            
        if self.voice_client and self.voice_client.is_paused():
            status.append("‚è∏Ô∏è –°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞")
        elif self.current:
            status.append("‚ñ∂Ô∏è –°—Ç–∞—Ç—É—Å: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
        else:
            status.append("‚èπÔ∏è –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        embed.add_field(name="‚öôÔ∏è –°—Ç–∞—Ç—É—Å", value="\n".join(status), inline=False)
        
        return embed

    async def disconnect_after_timeout(self, timeout):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º-–∞—É—Ç–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"""
        await asyncio.sleep(timeout)
        if self.voice_client and self.voice_client.is_connected() and not self.voice_client.is_playing():
            await self.voice_client.disconnect()
            if self.control_message:
                await self.update_control_panel()

class MusicControlView(disnake.ui.View):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    def __init__(self, cog):
        super().__init__(timeout=None)
        self.cog = cog
    
    @disnake.ui.button(emoji="‚èØÔ∏è", style=disnake.ButtonStyle.primary, custom_id="music:playpause")
    async def playpause_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.defer(ephemeral=True)
        
        player = self.cog.get_player(interaction.guild)
        if not player or not player.voice_client:
            return await interaction.followup.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if not interaction.author.voice or interaction.author.voice.channel != player.voice_client.channel:
                return await interaction.followup.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!", ephemeral=True)
            
            if player.voice_client.is_paused():
                player.voice_client.resume()
                await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂Ô∏è", ephemeral=True)
            else:
                player.voice_client.pause()
                await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚è∏Ô∏è", ephemeral=True)
                
            await player.update_control_panel()
        except Exception as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @disnake.ui.button(emoji="‚è≠Ô∏è", style=disnake.ButtonStyle.primary, custom_id="music:skip")
    async def skip_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.defer(ephemeral=True)
        
        player = self.cog.get_player(interaction.guild)
        if not player or not player.voice_client:
            return await interaction.followup.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if not interaction.author.voice or interaction.author.voice.channel != player.voice_client.channel:
                return await interaction.followup.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!", ephemeral=True)
            
            if not player.voice_client.is_playing() and not player.voice_client.is_paused():
                return await interaction.followup.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
            
            player.voice_client.stop()
            await interaction.followup.send("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω ‚è≠Ô∏è", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @disnake.ui.button(emoji="‚èπÔ∏è", style=disnake.ButtonStyle.danger, custom_id="music:stop")
    async def stop_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.defer(ephemeral=True)
        
        player = self.cog.get_player(interaction.guild)
        if not player or not player.voice_client:
            return await interaction.followup.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if not interaction.author.voice or interaction.author.voice.channel != player.voice_client.channel:
                return await interaction.followup.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!", ephemeral=True)
            
            if player.queue:
                player.queue.clear()
            
            if player.voice_client.is_playing() or player.voice_client.is_paused():
                player.voice_client.stop()
                player.current = None
                
            await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚èπÔ∏è", ephemeral=True)
            await player.update_control_panel()
        except Exception as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @disnake.ui.button(emoji="üîÅ", style=disnake.ButtonStyle.secondary, custom_id="music:loop")
    async def loop_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.defer(ephemeral=True)
        
        player = self.cog.get_player(interaction.guild)
        if not player or not player.voice_client:
            return await interaction.followup.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if not interaction.author.voice or interaction.author.voice.channel != player.voice_client.channel:
                return await interaction.followup.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!", ephemeral=True)
            
            player.loop = not player.loop
            await interaction.followup.send(f"–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω' if player.loop else '–≤—ã–∫–ª—é—á–µ–Ω'}", ephemeral=True)
            await player.update_control_panel()
        except Exception as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @disnake.ui.button(emoji="üîÄ", style=disnake.ButtonStyle.secondary, custom_id="music:shuffle")
    async def shuffle_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.defer(ephemeral=True)
        
        player = self.cog.get_player(interaction.guild)
        if not player or not player.voice_client:
            return await interaction.followup.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            if not interaction.author.voice or interaction.author.voice.channel != player.voice_client.channel:
                return await interaction.followup.send("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!", ephemeral=True)
            
            if not player.queue:
                return await interaction.followup.send("–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è!", ephemeral=True)
            
            queue_list = list(player.queue)
            random.shuffle(queue_list)
            player.queue = deque(queue_list)
            
            await interaction.followup.send("–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!", ephemeral=True)
            await player.update_control_panel()
        except Exception as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

class MusicCog(commands.Cog):
    """–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Discord –±–æ—Ç–∞"""
    def __init__(self, bot):
        self.bot = bot
        self.players = {}
        self.control_view = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ on_ready
        
    @commands.Cog.listener()
    async def on_ready(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö event loop"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º view –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        self.control_view = MusicControlView(self)
        self.bot.add_view(self.control_view)
        print("–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

    def get_player(self, guild):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç MusicPlayer –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if guild.id not in self.players:
            self.players[guild.id] = MusicPlayer(self.bot, guild)
        return self.players[guild.id]
    
    async def ensure_voice(self, interaction):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞–Ω–∞–ª–µ"""
        player = self.get_player(interaction.guild)
        
        if not interaction.author.voice:
            raise commands.CommandError("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        
        if not player.voice_client:
            player.voice_client = await interaction.author.voice.channel.connect()
        elif player.voice_client.channel != interaction.author.voice.channel:
            raise commands.CommandError("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç!")
        
        return player
    
    @commands.slash_command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ —Å YouTube")
    async def play_command(self, interaction: disnake.ApplicationCommandInteraction, query: str):
        await interaction.response.defer()
        
        try:
            player = await self.ensure_voice(interaction)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–∞
            song = await Song.create(query, interaction.author, self.bot)
            player.queue.append(song)
            
            await interaction.followup.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **{song.title}**")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if player.voice_client and not player.voice_client.is_playing() and not player.voice_client.is_paused():
                player.next()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if player.control_message:
                await player.update_control_panel()
            
        except commands.CommandError as e:
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã play: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    
    @commands.slash_command(name="pause", description="–°—Ç–∞–≤–∏—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑—É")
    async def pause_command(self, interaction):
        try:
            player = await self.ensure_voice(interaction)
            
            if not player.voice_client or not player.voice_client.is_playing():
                if isinstance(interaction, disnake.ApplicationCommandInteraction):
                    return await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
                else:
                    return await interaction.followup.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
            
            if player.voice_client.is_paused():
                if isinstance(interaction, disnake.ApplicationCommandInteraction):
                    return await interaction.response.send_message("–ú—É–∑—ã–∫–∞ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ!", ephemeral=True)
                else:
                    return await interaction.followup.send("–ú—É–∑—ã–∫–∞ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ!", ephemeral=True)
            
            player.voice_client.pause()
            
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚è∏Ô∏è", ephemeral=True)
            else:
                await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚è∏Ô∏è", ephemeral=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await player.update_control_panel()
            
        except commands.CommandError as e:
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
            else:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @commands.slash_command(name="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞")
    async def resume_command(self, interaction):
        try:
            player = await self.ensure_voice(interaction)
            
            if not player.voice_client or not player.voice_client.is_paused():
                if isinstance(interaction, disnake.ApplicationCommandInteraction):
                    return await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ!", ephemeral=True)
                else:
                    return await interaction.followup.send("–ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ!", ephemeral=True)
            
            player.voice_client.resume()
            
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂Ô∏è", ephemeral=True)
            else:
                await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ñ∂Ô∏è", ephemeral=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await player.update_control_panel()
            
        except commands.CommandError as e:
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
            else:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @commands.slash_command(name="skip", description="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
    async def skip_command(self, interaction):
        try:
            player = await self.ensure_voice(interaction)
            
            if not player.voice_client or (not player.voice_client.is_playing() and not player.voice_client.is_paused()):
                if isinstance(interaction, disnake.ApplicationCommandInteraction):
                    return await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
                else:
                    return await interaction.followup.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!", ephemeral=True)
            
            player.voice_client.stop()
            
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω ‚è≠Ô∏è", ephemeral=True)
            else:
                await interaction.followup.send("–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω ‚è≠Ô∏è", ephemeral=True)
            
        except commands.CommandError as e:
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
            else:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @commands.slash_command(name="stop", description="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å")
    async def stop_command(self, interaction):
        try:
            player = await self.ensure_voice(interaction)
            
            if player.queue:
                player.queue.clear()
            
            if player.voice_client and (player.voice_client.is_playing() or player.voice_client.is_paused()):
                player.voice_client.stop()
                player.current = None
                
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚èπÔ∏è", ephemeral=True)
            else:
                await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚èπÔ∏è", ephemeral=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await player.update_control_panel()
            
        except commands.CommandError as e:
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
            else:
                await interaction.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @commands.slash_command(name="queue", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
    async def queue_command(self, interaction):
        player = self.get_player(interaction.guild)
        
        if not player.current and not player.queue:
            if isinstance(interaction, disnake.ApplicationCommandInteraction):
                return await interaction.response.send_message("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
            else:
                return await interaction.followup.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
        
        embed = player.create_queue_embed()
        
        if isinstance(interaction, disnake.ApplicationCommandInteraction):
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.followup.send(embed=embed, ephemeral=True)
    
    @commands.slash_command(name="setup_music_panel", description="–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π")
    @commands.has_permissions(administrator=True)
    async def setup_panel_command(self, interaction: disnake.ApplicationCommandInteraction, channel: disnake.TextChannel = None):
        if not self.control_view:
            self.control_view = MusicControlView(self)
            self.bot.add_view(self.control_view)
            
        target_channel = channel or interaction.channel
        player = self.get_player(interaction.guild)
        
        embed = player.create_queue_embed()
        control_message = await target_channel.send(embed=embed, view=self.control_view)
        player.control_message = control_message
        
        await interaction.response.send_message(f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {target_channel.mention}", ephemeral=True)
    
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        if member.id == self.bot.user.id:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        if before.channel is not None and self.bot.user in before.channel.members:
            # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç (–∫—Ä–æ–º–µ –±–æ—Ç–∞)
            if len([m for m in before.channel.members if not m.bot]) == 0:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                guild = before.channel.guild
                player = self.get_player(guild)
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
                if player.voice_client and player.voice_client.is_connected():
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
                    if player.voice_client.is_playing():
                        pass  # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ disconnect_after_timeout –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞
                    else:
                        # –ò–Ω–∞—á–µ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        asyncio.create_task(player.disconnect_after_timeout(60))  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç–∞

def setup(bot):
    bot.add_cog(MusicCog(bot)) 